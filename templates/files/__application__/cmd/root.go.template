{{ template "header.template" . }}package app

import (
	"log"
	"os"
	"strings"

	"{{ .PkgName }}/actions"
	"{{ .PkgName }}/app"
	"{{ .PkgName }}/models"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
)

const envPrefix = "{{ .EnvPrefixVar }}"

var (
	cfgFile string
	lambda  bool
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "testing",
	Short: "{{ .AppName }} is an API framework for Go.",
	Long: "{{ .AppName }} is an API framework for Go.",
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		// Return values from viper back to cobra if needed
		cmd.Flags().VisitAll(func(f *pflag.Flag) {
			if !f.Changed && viper.IsSet(f.Name) {
				f.Value.Set(viper.GetString(f.Name))
			}
		})
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		router := actions.App()
		{{ .Router.Main }}
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	log.SetOutput(os.Stdout)
	cobra.OnInitialize(initConfig)

	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is config.yaml)")
	rootCmd.PersistentFlags().StringVar(&app.AppName, "app-name", "{{ .AppName }}", "application name")
	rootCmd.PersistentFlags().StringVar(&app.DatabaseDsn, "database-dsn", "", "database dsn"){{ if .Sentry }}
	rootCmd.PersistentFlags().StringVar(&app.SentryDsn, "sentry-dsn", "", "sentry dsn"){{ end }}

	rootCmd.PersistentFlags().BoolVarP(&lambda, "lambda", "l", false, "whether to run as a lambda or not")

	err := viper.BindPFlags(rootCmd.PersistentFlags())
	cobra.CheckErr(err)

	app.Init()
	actions.Init()
	models.Init()
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		dir, err := os.Getwd()
		cobra.CheckErr(err)

		// Search config in home directory with name ".makego" (without extension).
		viper.AddConfigPath(dir)
		viper.SetConfigType("yaml")
		viper.SetConfigName("config")
	}

	viper.SetEnvPrefix(envPrefix)

	// Environment variables can't have dashes in them,
	// so bind them to their equivalent keys with underscores
	viper.SetEnvKeyReplacer(strings.NewReplacer("-", "_"))

	viper.AutomaticEnv() // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		log.Println("Using config file:", viper.ConfigFileUsed())
	}
}
